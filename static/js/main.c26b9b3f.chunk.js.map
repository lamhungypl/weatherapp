{"version":3,"sources":["components/Header/Header.js","components/Form/Form.js","components/WeatherLayout/WeatherLayout.js","components/AppTitle/AppTitle.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","brand","urlImg","urlBrand","className","href","this","target","rel","src","alt","React","Component","Form","props","onSubmit","getWeatherInfo","type","name","placeholder","value","WeatherLayout","location","city","country","temperature","humidity","error","AppTitle","title","subtitle","API_KEY","App","undefined","e","a","preventDefault","fetch","api_call","json","data","resCity","main","resTemp","temp","resHumidity","resCountry","sys","locationInfo","setState","console","log","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c26b9b3f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\nclass Header extends React.Component {\n  state = {\n    brand: \"OpenWeather\",\n    urlImg:\n      \"https://openweathermap.org/themes/openweathermap/assets/img/openweather-negative-logo-RGB.png\",\n    urlBrand: \"#\"\n  };\n  render() {\n    return (\n      <div className=\"row navbar\">\n        <div className=\"navbar-header col-*-3\">\n          <a\n            href={this.state.urlBrand}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img src={this.state.urlImg} alt=\"openweather\" />\n          </a>\n        </div>\n        <div className=\"navbar-collapse\">\n          <ul className=\"menu\">\n            <li className=\"menu-item\">\n              <a href={this.state.urlBrand}>Weather</a>\n            </li>\n            <li className=\"menu-item\">\n              <a href={this.state.urlBrand}>Map</a>\n            </li>\n            <li className=\"menu-item\">\n              <a href={this.state.urlBrand}>API</a>\n            </li>\n            <li className=\"menu-item\">\n              <a href={this.state.urlBrand}>Widgets</a>\n            </li>\n            <li className=\"menu-item\">\n              <a href={this.state.urlBrand}>Blog</a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Header;\n","import React from \"react\"\nimport \"./Form.css\"\n\nconst Form = props => {\n    return (\n        <div>\n            <form className=\"form\" onSubmit={props.getWeatherInfo}>\n                <input\n                    className=\"form-item\"\n                    type=\"text\"\n                    name=\"city\"\n                    placeholder=\"City...\"\n                />\n                <input\n                    className=\"form-item\"\n                    type=\"text\"\n                    name=\"country\"\n                    placeholder=\"Country...\"\n                />\n                <input\n                    className=\"form-item btn btn-primary\"\n                    type=\"submit\"\n                    value=\"Search\"\n                />\n            </form>\n        </div>\n    )\n}\n\nexport default Form\n","\nimport React from 'react';\nimport './WeatherLayout.css';\nconst WeatherLayout = (props) => {\n    return (\n        <div className=\"weather-layout\">\n            {\n                props.location.city && props.location.country &&\n                <p className=\"weather__key\">City:\n                    <span className=\"weather__value\">{props.location.city}, {props.location.country}</span>\n                </p>\n            }\n            {\n                props.location.temperature &&\n                <p className=\"weather__key\">Temp:\n                    <span className=\"weather__value\">{props.location.temperature}</span>\n                </p>\n            }\n            {\n                props.location.humidity &&\n                <p className=\"weather__key\">Humidity:\n                    <span className=\"weather__value\">{props.location.humidity}</span>\n                </p>\n            }\n            {\n                props.location.error &&\n                <p className=\"weather__key\">Error:\n                    <span className=\"weather__error\">{props.location.error}</span>\n                </p>\n            }\n        </div>\n    );\n}\nexport default WeatherLayout;","import React from \"react\";\nexport const AppTitle = props => (\n  <>\n    <h1 className=\"title-container__title\">{props.title}</h1>\n    <h3 className=\"title-container__subtitle\">{props.subtitle}</h3>\n  </>\n);\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Form from \"./components/Form/Form\";\nimport WeatherLayout from \"./components/WeatherLayout/WeatherLayout\";\nimport { AppTitle } from \"./components/AppTitle/AppTitle\";\nconst API_KEY = \"587b22a179e686349ea45a1e89040e3e\";\n\nclass App extends React.Component {\n  state = {\n    location: {\n      city: undefined,\n      country: undefined,\n      temperature: undefined,\n      humidity: undefined,\n      error: undefined\n    }\n  };\n  getWeatherInfo = async e => {\n    e.preventDefault();\n    // console.log(e.target);\n    const city = e.target.city.value || \"Ha Noi\";\n    const country = e.target.country.value || \"Viet Nam\";\n\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n    const data = await api_call.json();\n    if (city && country) {\n      const {\n        name: resCity,\n        main: { temp: resTemp, humidity: resHumidity },\n        sys: { country: resCountry }\n      } = data;\n      const locationInfo = {\n        city: resCity,\n        country: resCountry,\n        temperature: resTemp,\n        humidity: resHumidity,\n        error: undefined\n      };\n      this.setState({\n        location: locationInfo\n      });\n    } else {\n      this.setState({\n        location: {\n          city: undefined,\n          country: undefined,\n          temperature: undefined,\n          humidity: undefined,\n          error: \"Please enter the value.\"\n        }\n      });\n    }\n\n    console.log(this.state);\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"header\">\n          <Header />\n        </div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 col-md-5 col-lg-5 title-container\">\n                  <AppTitle\n                    title=\"Weather Finder\"\n                    subtitle=\"Find out temperature, humidity and more...\"\n                  />\n                </div>\n                <div className=\"col-xs-7 col-md-7 col-lg-7 form-container\">\n                  <Form getWeatherInfo={this.getWeatherInfo} />\n                  <WeatherLayout location={this.state.location} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}